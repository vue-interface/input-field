// vite.config.js
import vue from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/@vitejs+plugin-vue@4.0.0_vite@4.1.1+vue@3.2.47/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { pascalCase } from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/dist/index.js";
import path from "path";
import { defineConfig } from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/vite@4.1.1/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/vite-plugin-dts@1.7.2_vite@4.1.1/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var name = "@vue-interface/input-field";

// vite.config.js
var __vite_injected_original_dirname = "/Users/justinkimbrell/Code/vue-interface/packages/input-field";
var fileName = name.split("/")[1];
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "index.ts"),
      name: pascalCase(fileName),
      fileName
    },
    rollupOptions: {
      external: ["vue"],
      output: {
        globals: {
          vue: "Vue"
        }
      }
    },
    watch: !process.env.NODE_ENV && {
      include: [
        "./tailwindcss/**/*.js"
      ]
    }
  },
  plugins: [
    vue(),
    dts()
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2p1c3RpbmtpbWJyZWxsL0NvZGUvdnVlLWludGVyZmFjZS9wYWNrYWdlcy9pbnB1dC1maWVsZFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2p1c3RpbmtpbWJyZWxsL0NvZGUvdnVlLWludGVyZmFjZS9wYWNrYWdlcy9pbnB1dC1maWVsZC92aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvanVzdGlua2ltYnJlbGwvQ29kZS92dWUtaW50ZXJmYWNlL3BhY2thZ2VzL2lucHV0LWZpZWxkL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnO1xuaW1wb3J0IHsgcGFzY2FsQ2FzZSB9IGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cyc7XG5pbXBvcnQgeyBuYW1lIH0gZnJvbSAnLi9wYWNrYWdlLmpzb24nO1xuXG5jb25zdCBmaWxlTmFtZSA9IG5hbWUuc3BsaXQoJy8nKVsxXTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgICBidWlsZDoge1xuICAgICAgICBsaWI6IHtcbiAgICAgICAgICAgIGVudHJ5OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaW5kZXgudHMnKSxcbiAgICAgICAgICAgIG5hbWU6IHBhc2NhbENhc2UoZmlsZU5hbWUpLFxuICAgICAgICAgICAgZmlsZU5hbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgICAgIGV4dGVybmFsOiBbJ3Z1ZSddLFxuICAgICAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsczoge1xuICAgICAgICAgICAgICAgICAgICB2dWU6ICdWdWUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2F0Y2g6ICFwcm9jZXNzLmVudi5OT0RFX0VOViAmJiB7XG4gICAgICAgICAgICBpbmNsdWRlOiBbXG4gICAgICAgICAgICAgICAgJy4vdGFpbHdpbmRjc3MvKiovKi5qcydcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcGx1Z2luczogW1xuICAgICAgICB2dWUoKSxcbiAgICAgICAgZHRzKCksXG4gICAgXSxcbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiQHZ1ZS1pbnRlcmZhY2UvaW5wdXQtZmllbGRcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjAtYmV0YS43XCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIFZ1ZSBpbnB1dCBmaWVsZCBjb21wb25lbnQuXCIsXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdFwiXG4gIF0sXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcIm1haW5cIjogXCIuL2Rpc3QvaW5wdXQtZmllbGQudW1kLmNqc1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9pbnB1dC1maWVsZC5qc1wiLFxuICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgXCJleHBvcnRzXCI6IHtcbiAgICBcIi5cIjoge1xuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5wdXQtZmllbGQuanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbnB1dC1maWVsZC51bWQuanNcIixcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiXG4gICAgfSxcbiAgICBcIi4vZGlzdC9zdHlsZS5jc3NcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcbiAgfSxcbiAgXCJicm93c2Vyc2xpc3RcIjogXCJsYXN0IDIgdmVyc2lvbnMsID4gMC41JSwgaWUgPj0gMTFcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwid2F0Y2hcIjogXCJ2aXRlIGJ1aWxkIC0td2F0Y2ggLW0gZGV2ZWxvcG1lbnRcIixcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS92dWUtaW50ZXJmYWNlL2lucHV0LWZpZWxkLmdpdFwiXG4gIH0sXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiSW5wdXRcIixcbiAgICBcIkZpZWxkXCIsXG4gICAgXCJWdWVcIixcbiAgICBcIkNvbXBvbmVudFwiLFxuICAgIFwiVGFpbHdpbmRcIixcbiAgICBcIkJvb3RzdHJhcFwiXG4gIF0sXG4gIFwiYXV0aG9yXCI6IFwiSnVzdGluIEtpbWJyZWxsXCIsXG4gIFwibGljZW5zZVwiOiBcIklTQ1wiLFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Z1ZS1pbnRlcmZhY2UvaW5wdXQtZmllbGQvaXNzdWVzXCJcbiAgfSxcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92dWUtaW50ZXJmYWNlL2lucHV0LWZpZWxkL2RvY3MjcmVhZG1lXCIsXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkB2dWUtaW50ZXJmYWNlL2FjdGl2aXR5LWluZGljYXRvclwiOiBcIl4yLjAuMC1iZXRhLjEwXCIsXG4gICAgXCJAdnVlLWludGVyZmFjZS9mb3JtLWNvbnRyb2xcIjogXCJeMS4wLjAtYmV0YS4xMFwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJ2dWVcIjogXCJeMy4wLjBcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdml0ZWpzL3BsdWdpbi12dWVcIjogXCJeNC4wLjBcIixcbiAgICBcIkB2dWUvZXNsaW50LWNvbmZpZy10eXBlc2NyaXB0XCI6IFwiXjExLjAuMlwiLFxuICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMlwiLFxuICAgIFwiY2hhbmdlLWNhc2VcIjogXCJeNC4xLjJcIixcbiAgICBcImVzbGludFwiOiBcIl44LjI4LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tdnVlXCI6IFwiXjkuOC4wXCIsXG4gICAgXCJwYXNjYWxjYXNlXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC42XCIsXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjAuMThcIixcbiAgICBcInRzdXBcIjogXCJeNi42LjJcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNC4wLjBcIixcbiAgICBcInZpdGVcIjogXCJeNC4wLjBcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4xLjcuMVwiLFxuICAgIFwidnVlXCI6IFwiXjMuMi4zN1wiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVcsT0FBTyxTQUFTO0FBQ3pYLFNBQVMsa0JBQWtCO0FBQzNCLE9BQU8sVUFBVTtBQUNqQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7OztBQ0hkLFdBQVE7OztBRERWLElBQU0sbUNBQW1DO0FBT3pDLElBQU0sV0FBVyxLQUFLLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFFbEMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDeEIsT0FBTztBQUFBLElBQ0gsS0FBSztBQUFBLE1BQ0QsT0FBTyxLQUFLLFFBQVEsa0NBQVcsVUFBVTtBQUFBLE1BQ3pDLE1BQU0sV0FBVyxRQUFRO0FBQUEsTUFDekI7QUFBQSxJQUNKO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDWCxVQUFVLENBQUMsS0FBSztBQUFBLE1BQ2hCLFFBQVE7QUFBQSxRQUNKLFNBQVM7QUFBQSxVQUNMLEtBQUs7QUFBQSxRQUNUO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxJQUNBLE9BQU8sQ0FBQyxRQUFRLElBQUksWUFBWTtBQUFBLE1BQzVCLFNBQVM7QUFBQSxRQUNMO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDTCxJQUFJO0FBQUEsSUFDSixJQUFJO0FBQUEsRUFDUjtBQUNKLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
